#coding=utf-8

from numpy import *
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.patches import Circle

# 这个代码是随机生成数据文件， 然后显示在figure中
def genData():
    n = 1000 #number of points to create
    # xcord0 = []
    # ycord0 = []
    # xcord1 = []
    # ycord1 = []
    # markers =[]
    # colors =[]
    fw = open('testSet.txt','w')
    for i in range(n):
        [r0,r1] = random.standard_normal(2)
        myClass = random.uniform(0,1)
        if (myClass <= 0.5):
            fFlyer = r0 + 9.0
            tats = 1.0*r1 + fFlyer - 9.0
            # xcord0.append(fFlyer)
            # ycord0.append(tats)
        else:
            fFlyer = r0 + 2.0
            tats = r1+fFlyer - 2.0
            # xcord1.append(fFlyer)
            # ycord1.append(tats)
        fw.write("%f\t%f\t%f\n" % (fFlyer, tats, myClass))
        #fw.write("%f\t%f\t%d\n" % (fFlyer, tats, classLabel))

    fw.close()

def plot_svm(filename=r"e:/tmp/22/testSet_svm.txt", points=None, svm=None):
    xcord0 = []
    ycord0 = []
    xcord1 = []
    ycord1 = []
    for line in file(filename):
        f = line.strip().split()
        if len(f) != 3:
            continue
        x, y, l = float(f[0]), float(f[1]), int(f[2])
        if l > 0.5:
            xcord0.append(x)
            ycord0.append(y)
        else:
            xcord1.append(x)
            ycord1.append(y)
    fig = plt.figure()
    ax = fig.add_subplot(111)
    #ax.scatter(xcord,ycord, c=colors, s=markers)
    ax.scatter(xcord0,ycord0, marker='^', s=90)
    ax.scatter(xcord1,ycord1, marker='o', s=50, c='red')
    if points is not None:
        for pt, label in points:
            color = "red"
            if label < 0: color = "blue"
            # circle = plt.Circle(pt, 0.2, color=color, fill=False)
            # ax.add_artist(circle)
            ax.add_patch( Circle(pt, 0.2, color=color, fill=False) )

    # plt.plot([0,1], label='going up')
    if svm is not None:
        b = svm[1][0, 0]   #-3.75567;
        w0 = svm[0][0, 0] #0.8065;
        w1 = svm[0][1, 0] #-0.2761
        print '---b', b, 'w0', w0, w1
        x = arange(-1.0, 10.0, 0.1)
        y = (-w0 * x - b) / w1
        ax.plot(x, y)

    plt.show()

def plotRBF():
    xcord0 = [];
    ycord0 = [];
    xcord1 = [];
    ycord1 = []
    fw = open('testSetRBF2.txt', 'w')  # generate data

    fig = plt.figure()
    ax = fig.add_subplot(111)
    xcord0 = [];
    ycord0 = [];
    xcord1 = [];
    ycord1 = []
    for i in range(100):
        [x, y] = random.uniform(0, 1, 2)
        xpt = x * cos(2.0 * pi * y);
        ypt = x * sin(2.0 * pi * y)
        if (x > 0.5):
            xcord0.append(xpt);
            ycord0.append(ypt)
            label = -1.0
        else:
            xcord1.append(xpt);
            ycord1.append(ypt)
            label = 1.0
        fw.write('%f\t%f\t%f\n' % (xpt, ypt, label))
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('Non-linearly Separable Data for Kernel Method')
    plt.show()
    fw.close()

def notLinSeperable():
    xcord0 = [];
    ycord0 = [];
    xcord1 = [];
    ycord1 = []
    markers = []
    colors = []
    fr = open('testSet.txt')  # this file was generated by 2normalGen.py
    for line in fr.readlines():
        lineSplit = line.strip().split('\t')
        xPt = float(lineSplit[0])
        yPt = float(lineSplit[1])
        label = int(lineSplit[2])
        if (label == 0):
            xcord0.append(xPt)
            ycord0.append(yPt)
        else:
            xcord1.append(xPt)
            ycord1.append(yPt)

    fr.close()
    fig = plt.figure()
    ax = fig.add_subplot(221)
    xcord0 = [];
    ycord0 = [];
    xcord1 = [];
    ycord1 = []
    for i in range(300):
        [x, y] = random.uniform(0, 1, 2)
        if ((x > 0.5) and (y < 0.5)) or ((x < 0.5) and (y > 0.5)):
            xcord0.append(x);
            ycord0.append(y)
        else:
            xcord1.append(x);
            ycord1.append(y)
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('A')
    ax = fig.add_subplot(222)
    xcord0 = random.standard_normal(150);
    ycord0 = random.standard_normal(150)
    xcord1 = random.standard_normal(150) + 2.0;
    ycord1 = random.standard_normal(150) + 2.0
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('B')
    ax = fig.add_subplot(223)
    xcord0 = [];
    ycord0 = [];
    xcord1 = [];
    ycord1 = []
    for i in range(300):
        [x, y] = random.uniform(0, 1, 2)
        if (x > 0.5):
            xcord0.append(x * cos(2.0 * pi * y));
            ycord0.append(x * sin(2.0 * pi * y))
        else:
            xcord1.append(x * cos(2.0 * pi * y));
            ycord1.append(x * sin(2.0 * pi * y))
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('C')
    ax = fig.add_subplot(224)
    xcord1 = zeros(150);
    ycord1 = zeros(150)
    xcord0 = random.uniform(-3, 3, 350);
    ycord0 = random.uniform(-3, 3, 350);
    xcord1[0:50] = 0.3 * random.standard_normal(50) + 2.0;
    ycord1[0:50] = 0.3 * random.standard_normal(50) + 2.0

    xcord1[50:100] = 0.3 * random.standard_normal(50) - 2.0;
    ycord1[50:100] = 0.3 * random.standard_normal(50) - 3.0

    xcord1[100:150] = 0.3 * random.standard_normal(50) + 1.0;
    ycord1[100:150] = 0.3 * random.standard_normal(50)
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('D')
    plt.show()



if __name__ == '__main__':
    # points = (([4.658191, 3.507396], -1.0),
    #           ([3.457096, -0.082216], -1.),
    #           ([2.893743, -1.643468], -1.0),
    #           ([6.080573, 0.418886], 1.0), )
    # plot_svm("e:/tmp/22/testSet_svm.txt", points)

    #plotRBF()

    notLinSeperable()
